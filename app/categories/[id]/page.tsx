'use client';

import Navbar from '@/app/components/Navbar';
import ProductGrid from '@/app/components/ProductGrid';
import Skelton from '@/app/components/Skeleton';
import QueryProvider from '@/src/lib/query';
import { useInfiniteQuery } from '@tanstack/react-query';
import { NextPage } from 'next';
import Head from 'next/head';

export const SingleCategory: NextPage = () => {
  let pathmane = window.location.pathname;
  const categoryId = pathmane.replace('/categories/', '');

  const getSingleCategory = async ({ pageParam = null }) => {
    try {
      let url = `/api/categories/${categoryId}`;
      if (pageParam) {
        pathmane += `?cursorId=${pageParam}`;
      }
      const respJSON = await fetch(url);
      const resp = await respJSON.json();
      return resp;
    } catch (error) {
      throw error;
    }
  };

  const queryKey = `singleCategory ${categoryId as string}`;

  const { isLoading, data, fetchNextPage, isError } = useInfiniteQuery({
    queryKey: [queryKey],
    queryFn: getSingleCategory,
    getNextPageParam: lastPage => lastPage?.nextCursor,
    initialPageParam: undefined,
    enabled: !!categoryId
  });

  const allProductsWithCategory: any = {
    name: '',
    products: [],
    hasMore: false
  };

  data?.pages.map(page => {
    if (page?.category) {
      if (page.category?.name) {
        allProductsWithCategory.name = page.category?.name;
      }
      if (page.category?.products && page.category?.products.length > 0) {
        allProductsWithCategory.products.push(...page.category?.products);
      }
    }
    return page?.category;
  });

  if (data?.pages[data?.pages.length - 1]?.category?.products.length === 0) {
    allProductsWithCategory.hasMore = false;
  }

  return (
    <div>
      <Head>
        <title>
          {isLoading
            ? 'Loading...'
            : `All ${allProductsWithCategory?.name} Product`}
        </title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <QueryProvider>
        <main className='container mx-auto'>
          <Navbar />
          {isLoading ? (
            <Skelton />
          ) : (
            <>
              {allProductsWithCategory &&
                allProductsWithCategory.products.length > 0 && (
                  <ProductGrid
                    hasMore={allProductsWithCategory.hasMore}
                    showLink={false}
                    categories={[allProductsWithCategory]}
                    loadMoreFun={fetchNextPage}
                  />
                )}
            </>
          )}
        </main>
      </QueryProvider>
    </div>
  );
};

export default SingleCategory;
